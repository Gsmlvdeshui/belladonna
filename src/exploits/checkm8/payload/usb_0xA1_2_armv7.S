@ Patches iBSS sigchecks and adds a trampoline to patch iBEC command handler load address
@ Original payload by axi0mX: https://github.com/axi0mX/ipwndfu/blob/master/src/usb_0xA1_2_armv7.S
@ Uses code from greenpois0n: https://github.com/Chronic-Dev/gprc5/blob/master/syringe/syringe/exploits/limera1n/limera1n.S

.text

.pool
.set LOAD_ADDRESS,        	0xBAD00001
.set IMG_MAGIC,     	  	0xBAD00002
.set TAG_DATA,     	 	  	0xBAD00003
.set TAG_KBAG,     	  	  	0xBAD00004
.set AES_TYPE_GID,     	  	0xBAD00005
.set AES_CRYPTO_CMD,      	0xBAD00006
.set AES_MODE_256,     	  	0xBAD00007
.set RSA_OFFSET,     	  	0xBAD00008
.set PATCH_RSA,     	  	0xBAD00009
.set TRAMPOLINE_BW_OFFSET,	0xBAD0000A
.set TRAMPOLINE_BW,         0xBAD0000B
.set TRAMPOLINE_START,    	0xBAD0000C
.set GET_BOOT_TRAMPOLINE, 	0xBAD0000D
.set JUMPTO,		      	0xBAD0000E

.code 16
.global _main
_main:
jump_back:
	BKPT #1
	BKPT #1
	BKPT #1
	BKPT #1

	LDRH R2, [R0]
	MOVW R3, #0x2A1
	CMP  R2, R3
	BNE  jump_back

	PUSH {R4-R7,LR}
	ADD  R7, SP, #0xC
	SUB  SP, SP, #0x10

	MOV  R4, R0
	LDR  R5, =LOAD_ADDRESS

	MOVW R1, #0xFFFF
	LDRH R2, [R4,#2]
	CMP  R1, R2
	BNE  request_done

	LDRD  R0, R1, [R5]

	LDR  R2, =IMG_MAGIC
	CMP  R0, R2
	BNE  request_done

decrypt_image:
	LDR	R0,	=TAG_DATA
	LDR	R1,	=LOAD_ADDRESS
	LDR	R2,	[R1, #4]	@ header->fullSize
	BL	find
	CMP	R0,	#0
	BEQ	request_done
	MOV	R6,	R0

	LDR	R0,	=TAG_KBAG
	LDR	R1,	=LOAD_ADDRESS
	LDR	R2,	[R1, #4]	@ header->fullSize
	BL	find
	CMP	R0,	#0
	BEQ	request_done
	MOV	R5,	R0

	MOV	R0,	#0x11		@ AES_DECRYPT
	MOV	R4,	#0x14
	ADD	R1,	R5,	R4
	ADD	R2,	R5,	R4
	MOV	R3,	#0x30		@ KBAG_KEY_IV_SIZE
	LDR	R4,	=AES_TYPE_GID
	STR	R4,	[SP]
	MOV	R4,	#0
	STR	R4,	[SP, #4]
	MOV	R4,	#0
	STR	R4,	[SP, #8]
	LDR	R4,	=AES_CRYPTO_CMD
	BLX	R4

	MOV	R0,	#0x11		@ AES_DECRYPT
	MOV	R4,	#0xc
	ADD	R1,	R6,	R4
	ADD	R2,	R6,	R4
	LDR	R3,	[R6, #0x8]
	LDR	R4,	=AES_MODE_256
	STR	R4,	[SP]
	MOV	R4,	#0x24
	ADD	R4,	R5
	STR	R4,	[SP, #4]
	MOV	R4,	#0x14
	ADD	R4,	R5
	STR	R4,	[SP, #8]
	LDR	R4,	=AES_CRYPTO_CMD
	BLX	R4

copy_image:
	LDR	R0,	=LOAD_ADDRESS
	MOV	R1,	#0xc
	ADD	R1,	R6
	LDR	R2,	[R6, #8]	@ header->fullSize
	MOV	R5,	R2
	BL	memcpy

patch_image:
	LDR R2, =RSA_OFFSET
	LDR R0, =PATCH_RSA
	STR R0, [R2]
	LDR R2, =TRAMPOLINE_BW_OFFSET
	LDR R0, =TRAMPOLINE_BW
	STR R0, [R2]
	LDR R0, =TRAMPOLINE_START
	ADR R1, iBEC_TRAMPOLINE
	MOV R2, #24
	BL memcpy


boot_image:
	LDR R3, =GET_BOOT_TRAMPOLINE
	BLX R3
	MOV R1, R0
	MOV R0, #0
	LDR R2, =LOAD_ADDRESS
	LDR R3, =JUMPTO
	BLX R3

request_done:
	MOV  R0, #0
	ADD  SP, SP, #0x10
	POP  {R4-R7,PC}

memcpy:

_memcpy_loop:
	LDRB	R3,	[R1]
	STRB	R3,	[R0]
	ADD	R0,	#1
	ADD	R1,	#1
	SUB	R2,	#1
	CMP	R2,	#0
	BNE	_memcpy_loop

	BX	LR

find:
	PUSH	{R4, LR}
_find_loop:
	LDR	R4,	[R1]
	CMP	R4,	R0
	BEQ _find_ret

_find_loop_continue:
	ADD	R1,	#2
	SUB	R2,	#2
	CMP	R2,	#0
	BNE	_find_loop

	MOV	R1,	#0	@ not found

_find_ret:
	MOV	R0,	R1
	POP	{R4, PC}
.align 2
iBEC_TRAMPOLINE:
.word 0x18764e03, 0x4500f04f, 0x4e026035, 0x000047b0, 0xFEEDFACE, 0xCAFEBABE
@ Here for completeness: The iBEC trampoline

@.set GO_HANDLER_OFFSET, 	0xFEEDFACE
@.set IBEC_LOAD_ADDRESS,    0x80000000
@.set JUMPTO_ADDRESS,    	0xCAFEBABE
@main:
@	LDR R6, =GO_HANDLER_OFFSET
@	ADD R6, R1
@	LDR R5, =IBEC_LOAD_ADDRESS
@	STR R5, [R6]
@	LDR R6, =JUMPTO_ADDRESS
@	BLX R6
